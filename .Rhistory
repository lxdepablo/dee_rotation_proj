ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(aes(col = site)) +
geom_smooth(method = 'lm') +
labs(x = "Algae Cover (%)", y = "Diversity")
ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(size = 5, aes(col = site)) +
geom_smooth(method = 'lm') +
labs(x = "Algae Cover (%)", y = "Diversity")
ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(size = 5, alpha = 0.8, aes(col = site)) +
geom_smooth(method = 'lm') +
labs(x = "Algae Cover (%)", y = "Diversity")
ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(size = 3, alpha = 0.8, aes(col = site)) +
geom_smooth(method = 'lm') +
labs(x = "Algae Cover (%)", y = "Diversity")
ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(size = 3, alpha = 0.8, aes(col = site)) +
geom_smooth(method = 'lm') +
scale_color_manual(values = pal) +
labs(x = "Algae Cover (%)", y = "Diversity", col = "Site")
ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(size = 3, aes(col = site)) +
geom_smooth(method = 'lm') +
scale_color_manual(values = pal) +
labs(x = "Algae Cover (%)", y = "Diversity", col = "Site")
ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(size = 5, aes(col = site)) +
geom_smooth(method = 'lm') +
scale_color_manual(values = pal) +
labs(x = "Algae Cover (%)", y = "Diversity", col = "Site")
ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(size = 5, alpha = 0.7, aes(col = site)) +
geom_smooth(method = 'lm') +
scale_color_manual(values = pal) +
labs(x = "Algae Cover (%)", y = "Diversity", col = "Site")
ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(size = 5, aes(col = site)) +
geom_smooth(method = 'lm') +
scale_color_manual(values = pal) +
labs(x = "Algae Cover (%)", y = "Diversity", col = "Site")
diversity_algae <- ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(size = 5, aes(col = site)) +
geom_smooth(method = 'lm') +
scale_color_manual(values = pal) +
labs(x = "Algae Cover (%)", y = "Diversity", col = "Site")
ggsave("C:/Users/luisf/Desktop/blog_los-hermanos-intermareales-main/blog_los-hermanos-intermareales-main/figures/diversity_algae.pdf", diversity_algae)
library(tidyverse)
library(rmdformats)
library(kableExtra) # for example code; delete if not needed
library(vegan)
library(usedist)
library(shiny)
library(leaflet)
library(shinythemes)
library(cowplot)
library(rcartocolor)
# Set code chunk defaults
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning = FALSE,
fig.align = "center")
# Set R environment options
options(knitr.kable.NA = '')
beaches <- read_csv("Data/beachData.csv")
controlSummary<- read.csv("Data/controlSummary.csv")
controlSummary <- controlSummary%>%
select(-  X)
##correction for america 1 variable
controlSummary$site[1] <- "America 1"
#get color palettes
#display_carto_all(colorblind_friendly = TRUE)
pal = carto_pal(12, "Safe")
divAlgData <- beaches %>%
mutate(site = replace(site, site == "America_1", "America 1"),
site = replace(site, site == "America_2", "America 2"))
diversity_algae <- ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(size = 5, aes(col = site)) +
geom_smooth(method = 'lm') +
scale_color_manual(values = pal) +
labs(x = "Algae Cover (%)", y = "Diversity", col = "Site")
source("~/.active-rstudio-document", echo=TRUE)
ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(size = 5, aes(col = site)) +
geom_smooth(method = 'lm') +
scale_color_manual(values = pal) +
theme_bw() +
labs(x = "Algae Cover (%)", y = "Diversity", col = "Site")
diversity_algae <- ggplot(data = divAlgData, aes(x = algaePercentCover, y = controlDiversity)) +
geom_point(size = 5, aes(col = site)) +
geom_smooth(method = 'lm') +
scale_color_manual(values = pal) +
theme_bw() +
labs(x = "Algae Cover (%)", y = "Diversity", col = "Site")
ggsave("C:/Users/luisf/Desktop/blog_los-hermanos-intermareales-main/blog_los-hermanos-intermareales-main/figures/diversity_algae.pdf", diversity_algae)
#bray-curtis dissimilarity index comparison/groupings
bray_dist <- vegdist(controlSummary[-1], method = "bray")
#NMDS (also using bray-curtis dissimilarity)
nmds <- metaMDS(controlSummary[-1], distance = "bray", autotransform = FALSE)
pointData <- data.frame(nmds$points) %>%
mutate(site = controlSummary$site)
speciesData <- data.frame(nmds$species)
ggplot() +
geom_point(data = pointData, size = 5, aes(x = MDS1, y = MDS2, col = site)) +
theme_bw() +
scale_color_manual(values = pal) +
labs(col = "Site")
#plot sites
nmdsPlot <- ggplot() +
geom_point(data = pointData, size = 5, aes(x = MDS1, y = MDS2, col = site)) +
theme_bw() +
scale_color_manual(values = pal) +
labs(col = "Site")
ggsave("C:/Users/luisf/Desktop/blog_los-hermanos-intermareales-main/blog_los-hermanos-intermareales-main/figures/nmds.pdf", nmdsPlot)
sedpo4 <- ggplot(data = beaches, aes(x = po4SedMean, y = controlDiversity)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 1) +
ylim(0, 2.5) +
labs(x = "PO4 Concentration (ug/g)", y = "Diversity")
sedno2no3 <- ggplot(data = beaches, aes(x = no2no3SedMean, y = controlDiversity)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 1) +
ylim(0, 2.5) +
labs(x = "NO2/NO3 Concentration (ug/g)", y = "")
sednh4 <- ggplot(data = beaches, aes(x = nh4SedMean, y = controlDiversity)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 1) +
ylim(0, 2.5) +
labs(x = "NH4 Concentration (ug/g)", y = "")
sedPlots <- plot_grid(sedpo4, sedno2no3, sednh4, labels = "auto", align = "h", nrow = 1)
#generate graphs of algae cover vs nutrinet concentration
algpo4 <- ggplot(data = beaches, aes(x = algaePercentCover, y = po4SedMean)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 0.5) +
xlim(0, 2.25) +
labs(y = "PO4 Concentration (ug/g)", x = "")
algno2no3 <- ggplot(data = beaches, aes(x = algaePercentCover, y = no2no3SedMean)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 0.5) +
xlim(0, 2.25) +
labs(y = "NO2/NO3 Concentration (ug/g)", x = "")
algnh4 <- ggplot(data = beaches, aes(x = algaePercentCover, y = nh4SedMean)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 0.5) +
xlim(0, 2.25) +
ylim(0, 8) +
labs(y = "NH4 Concentration (ug/g)", x = "Algae Cover (%)")
algPlots <- plot_grid(algpo4, algno2no3, algnh4, labels = "auto", align = "v", nrow = 3)
ggsave("C:/Users/luisf/Desktop/blog_los-hermanos-intermareales-main/blog_los-hermanos-intermareales-main/figures/algPlots.pdf", algPlots)
sedpo4 <- ggplot(data = beaches, aes(x = po4SedMean, y = controlDiversity)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 1) +
ylim(0, 2.5) +
labs(x = "PO4 Concentration (ug/g)", y = "Diversity")
sedno2no3 <- ggplot(data = beaches, aes(x = no2no3SedMean, y = controlDiversity)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 1) +
ylim(0, 2.5) +
labs(x = "NO2/NO3 Concentration (ug/g)", y = "")
sednh4 <- ggplot(data = beaches, aes(x = nh4SedMean, y = controlDiversity)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 1) +
ylim(0, 2.5) +
labs(x = "NH4 Concentration (ug/g)", y = "")
sedPlots <- plot_grid(sedpo4, sedno2no3, sednh4, labels = "auto", align = "h", nrow = 1)
ggsave("C:/Users/luisf/Desktop/blog_los-hermanos-intermareales-main/blog_los-hermanos-intermareales-main/figures/sedPlots.pdf", sedPlots)
#generate graphs of algae cover vs nutrinet concentration
algpo4 <- ggplot(data = beaches, aes(x = algaePercentCover, y = po4SedMean)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 0.5, text = element_text(size = 10)) +
xlim(0, 2.25) +
labs(y = "PO4 Concentration (ug/g)", x = "")
algno2no3 <- ggplot(data = beaches, aes(x = algaePercentCover, y = no2no3SedMean)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 0.5) +
xlim(0, 2.25) +
labs(y = "NO2 + NO3 Concentration (ug/g)", x = "")
algnh4 <- ggplot(data = beaches, aes(x = algaePercentCover, y = nh4SedMean)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 0.5) +
xlim(0, 2.25) +
ylim(0, 8) +
labs(y = "NH4 Concentration (ug/g)", x = "Algae Cover (%)")
plot_grid(algpo4, algno2no3, algnh4, labels = "auto", align = "v", nrow = 3)
#generate graphs of algae cover vs nutrinet concentration
algpo4 <- ggplot(data = beaches, aes(x = algaePercentCover, y = po4SedMean)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 0.5, text = element_text(size = 20)) +
xlim(0, 2.25) +
labs(y = "PO4 Concentration (ug/g)", x = "")
algno2no3 <- ggplot(data = beaches, aes(x = algaePercentCover, y = no2no3SedMean)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 0.5) +
xlim(0, 2.25) +
labs(y = "NO2 + NO3 Concentration (ug/g)", x = "")
algnh4 <- ggplot(data = beaches, aes(x = algaePercentCover, y = nh4SedMean)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 0.5) +
xlim(0, 2.25) +
ylim(0, 8) +
labs(y = "NH4 Concentration (ug/g)", x = "Algae Cover (%)")
plot_grid(algpo4, algno2no3, algnh4, labels = "auto", align = "v", nrow = 3)
#generate graphs of algae cover vs nutrinet concentration
algpo4 <- ggplot(data = beaches, aes(x = algaePercentCover, y = po4SedMean)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 0.5) +
xlim(0, 2.25) +
labs(y = "PO4 Concentration (ug/g)", x = "")
algno2no3 <- ggplot(data = beaches, aes(x = algaePercentCover, y = no2no3SedMean)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 0.5) +
xlim(0, 2.25) +
labs(y = "NO2 + NO3 Concentration (ug/g)", x = "")
algnh4 <- ggplot(data = beaches, aes(x = algaePercentCover, y = nh4SedMean)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 0.5) +
xlim(0, 2.25) +
ylim(0, 8) +
labs(y = "NH4 Concentration (ug/g)", x = "Algae Cover (%)")
sedpo4 <- ggplot(data = beaches, aes(x = po4SedMean, y = controlDiversity)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 1, text = element_text(size = 8)) +
ylim(0, 2.5) +
labs(x = "PO4 Concentration (ug/g)", y = "Diversity")
sedno2no3 <- ggplot(data = beaches, aes(x = no2no3SedMean, y = controlDiversity)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 1, text = element_text(size = 8)) +
ylim(0, 2.5) +
labs(x = "NO2 + NO3 Concentration (ug/g)", y = "")
sednh4 <- ggplot(data = beaches, aes(x = nh4SedMean, y = controlDiversity)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
theme(aspect.ratio = 1, text = element_text(size = 8)) +
ylim(0, 2.5) +
labs(x = "NH4 Concentration (ug/g)", y = "")
sedPlots <- plot_grid(sedpo4, sedno2no3, sednh4, labels = "auto", align = "h", nrow = 1)
ggsave("C:/Users/luisf/Desktop/blog_los-hermanos-intermareales-main/blog_los-hermanos-intermareales-main/figures/sedPlots.pdf", sedPlots)
library(tidyverse)
library(rmdformats)
library(kableExtra) # for example code; delete if not needed
library(vegan)
library(usedist)
library(shiny)
library(leaflet)
library(shinythemes)
library(cowplot)
library(rcartocolor)
# Set code chunk defaults
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning = FALSE,
fig.align = "center")
# Set R environment options
options(knitr.kable.NA = '')
beaches <- read_csv("Data/beachData.csv")
controlSummary<- read.csv("Data/controlSummary.csv")
controlSummary <- controlSummary%>%
select(-  X)
##correction for america 1 variable
controlSummary$site[1] <- "America 1"
install.packages(c("BH", "bit", "blob", "bookdown", "brew", "broom", "bslib", "cachem", "callr", "caret", "classInt", "cli", "colorspace", "commonmark", "cpp11", "crayon", "crul", "curl", "data.table", "dbplyr", "desc", "devtools", "digest", "dplyr", "dtplyr", "duckdb", "e1071", "emmeans", "evaluate", "exactextractr", "fansi", "farver", "fastmap", "fontawesome", "forcats", "fs", "future", "future.apply", "gargle", "gdalUtilities", "generics", "geojsonio", "geojsonR", "geometries", "gert", "gh", "gitcreds", "globals", "googledrive", "googlesheets4", "gower", "gtable", "hardhat", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "insight", "ipred", "isoband", "janitor", "jpeg", "jsonify", "jsonlite", "knitr", "latticeExtra", "lava", "leaflet", "listenv", "lme4", "lubridate", "lwgeom", "maptools", "markdown", "modelr", "multcomp", "ncdf4", "openssl", "parallelly", "patchwork", "pbapply", "pdftools", "piecewiseSEM", "pkgbuild", "pkgload", "plotly", "plyr", "png", "processx", "progressr", "protolite", "ps", "purrr", "qpdf", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "readr", "readxl", "recipes", "reprex", "rgdal", "rgeos", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "servr", "sf", "sfheaders", "shiny", "sourcetools", "sp", "stringi", "svglite", "sys", "terra", "testthat", "tibble", "tidyr", "tidyverse", "timeDate", "tinytex", "triebeard", "units", "utf8", "V8", "vctrs", "vegan", "viridisLite", "vroom", "webshot", "whisker", "wk", "xfun", "XML", "yaml", "zip", "zoo"))
install.packages(c("BH", "bit", "blob", "bookdown", "brew", "broom", "bslib", "cachem", "callr", "caret", "classInt", "cli", "colorspace", "commonmark", "cpp11", "crayon", "crul", "curl", "data.table", "dbplyr", "desc", "devtools", "digest", "dplyr", "dtplyr", "duckdb", "e1071", "emmeans", "evaluate", "exactextractr", "fansi", "farver", "fastmap", "fontawesome", "forcats", "fs", "future", "future.apply", "gargle", "gdalUtilities", "generics", "geojsonio", "geojsonR", "geometries", "gert", "gh", "gitcreds", "globals", "googledrive", "googlesheets4", "gower", "gtable", "hardhat", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "insight", "ipred", "isoband", "janitor", "jpeg", "jsonify", "jsonlite", "knitr", "latticeExtra", "lava", "leaflet", "listenv", "lme4", "lubridate", "lwgeom", "maptools", "markdown", "modelr", "multcomp", "ncdf4", "openssl", "parallelly", "patchwork", "pbapply", "pdftools", "piecewiseSEM", "pkgbuild", "pkgload", "plotly", "plyr", "png", "processx", "progressr", "protolite", "ps", "purrr", "qpdf", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "readr", "readxl", "recipes", "reprex", "rgdal", "rgeos", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "servr", "sf", "sfheaders", "shiny", "sourcetools", "sp", "stringi", "svglite", "sys", "terra", "testthat", "tibble", "tidyr", "tidyverse", "timeDate", "tinytex", "triebeard", "units", "utf8", "V8", "vctrs", "vegan", "viridisLite", "vroom", "webshot", "whisker", "wk", "xfun", "XML", "yaml", "zip", "zoo"))
# load libraries ----
library(tidyverse)
# load libraries ----
library(tidyverse)
install.packages(c("cli", "fansi", "piecewiseSEM", "pkgbuild", "pkgload", "plotly", "plyr", "png", "processx", "progressr", "protolite", "ps", "purrr", "qpdf", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "readr", "readxl", "recipes", "reprex", "rgdal", "rgeos", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "servr", "sf", "sfheaders", "shiny", "sourcetools", "sp", "stringi", "svglite", "sys", "terra", "testthat", "tibble", "tidyr", "tidyverse", "timeDate", "tinytex", "triebeard", "units", "utf8", "V8", "vctrs", "vegan", "viridisLite", "vroom", "webshot", "whisker", "wk", "xfun", "XML", "yaml", "zip", "zoo"))
# load libraries ----
library(tidyverse)
# load libraries ----
library(tidyverse)
install.packages("vctrs")
remove.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages(c("cli", "fansi", "utf8"))
install.packages(c("cli", "fansi", "utf8"))
# load libraries ----
library(tidyverse)
install.packages("vctrs")
remove.packages("cli")
install.packages("cli")
install.packages("cli")
updateR()
library(installr)
updateR()
# load libraries ----
library(sdmpredictors)
# load packages and set working directory ----
library(tidyverse)
library(tictoc)
library(deSolve)
# set wd to active script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# define some useful functions ----
# function to extract the site name from the filename
extract_site_name <- function(fn) {
# Extract substring between the first two periods
site_name <- sub("^.*?\\.(.*?)\\..*$", "\\1", fn)
# replace spaces with underscores
site_name <- gsub(" ", "_", site_name)
}
# function to read in all node and edge lists in a directory and return a list of pairs for each site
read_food_webs <- function(directory){
# List all files in the folder ending with "NODES.csv" or "EDGES.csv" and get site names
node_file_list <- list.files(path = directory, pattern = "NODES.csv$", full.names = TRUE)
node_site_list <- lapply(node_file_list, function(file) {
extract_site_name(file)
})
edge_file_list <- list.files(path = directory, pattern = "EDGES.csv$", full.names = TRUE)
edge_site_list <- lapply(edge_file_list, function(file) {
extract_site_name(file)
})
# Use lapply to read all files and store them in a list of data frames
nodes_lists_raw <- lapply(node_file_list, function(file) {
# Read the CSV file and return it as a data frame
read.csv(file)
})
edges_lists_raw <- lapply(edge_file_list, function(file) {
# Read the CSV file and return it as a data frame
read.csv(file)
})
# add site names to node and edge lists
names(nodes_lists_raw) <- node_site_list
names(edges_lists_raw) <- edge_site_list
# match up node and edge list for each site
node_edge_pairs <- lapply(1:length(nodes_lists_raw), function(i) {
curr_site <- names(nodes_lists_raw)[i]
list(nodes_lists_raw[[curr_site]], edges_lists_raw[[curr_site]])
})
# add names to matched list
names(node_edge_pairs) <- names(nodes_lists_raw)
return(node_edge_pairs)
}
# function to generate adjacency matrix from node and edge lists
make_adj <- function(nodes, edges) {
# make matrix of zeroes with length and width equal to number of species in node list
num_species <- nrow(nodes)
adj_mat <- matrix(0, nrow = num_species, ncol = num_species)
# name each row and column in adjacency matrix with node ID's from node list
rownames(adj_mat) <- as.character(nodes$Node.ID)
colnames(adj_mat) <- as.character(nodes$Node.ID)
# use lapply to set matrix cell to 1 for each interaction in edge list
for(i in 1:nrow(edges)) {
# get node ID's for sp 1 and 2
sp1_ID <- as.character(edges$species_1_Node.ID[i])
sp2_ID <- as.character(edges$species_2_Node.ID[i])
# set matrix[sp1, sp2] to 1
adj_mat[sp1_ID, sp2_ID] <- 1
}
return(adj_mat)
}
# function to generate the initial state vector weighted by trophic level
make_state <- function(nodes, producer_biomass) {
# for each step up in trophic level, biomass should divide by 10
# use lapply to assign biomasses to each species in node list based on TL
biomasses <- producer_biomass/(2^(nodes$TL-1))
names(biomasses) <- nodes$Node.ID
return(biomasses)
}
# placeholder function to calculate the relative ascendancy of a node in a food web
calculate_relative_ascendancy <- function(adjacency_matrix, node_ID) {
# Extract the specified row and column of the node in the adjacency matrix
row_of_node <- adjacency_matrix[node_ID, ]
col_of_node <- adjacency_matrix[, node_ID]
# Calculate in-degree (predators) and out-degree (prey) for the specified node
in_degree <- sum(row_of_node)
out_degree <- sum(col_of_node)
# Calculate the relative ascendancy for the node
relative_ascendancy <- in_degree / (in_degree + out_degree)
return(relative_ascendancy)
}
# function from Henry's ATN script to get change in biomass over time using ATN
vectorized_get_dB <- function(t, state, parameters) {
# extract parameters from list of model parameters
r <- parameters$r
K <- parameters$K
x <- parameters$x
y <- parameters$y
e <- parameters$e
B0 <- parameters$B0
q <- parameters$q
# get number of species in web
S <- nrow(adjacency_matrix)
# if a species' biomass fell below the extinction threshold, set its biomass to 0
threshold <- 1*10^(-10)
state <- ifelse(state < threshold, 0, state)
# calculate primary production vector
primary_production <- r*state*(1-state/K)
# Calculate metabolic loss vector
metabolic_loss <- x*state
# calculate resource gain and consumer loss vectors
resource_gain <- rep(0, S) # initiate a vector to store resource gain for each species
consumer_loss <- rep(0, S) # initiate a vector to store consumer loss for each species
for (i in 1:S) {
# calculate resource_gain
b_sum_i <- as.vector(state^(1+q) %*% adjacency_matrix[i,])
F_ij <- (state^(1+q))/(b_sum_i + B0[i,]^(1+q))
resource_gain[i] <- (x[i]*y[i,]*F_ij*state[i]) %*% adjacency_matrix[i,]
# calculate consumer_loss
b_sum_j <- t(adjacency_matrix %*% state^(1+q))
F_ji <- state[i]^(1+q)/(b_sum_j + B0[,i]^(1+q))
consumer_loss[i] <- (x*y[,i]*F_ji*state/e[,i]) %*% adjacency_matrix[,i]
}
# sum the above components and store in dBdt
dBdt <- primary_production - metabolic_loss + resource_gain - consumer_loss
return(list(dBdt))
}
# function to run a simulation for a given site
# input: node list, edge list, number of generations to run, initial state vector
# output: dataframe of biomasses for each species at each time step, cols are species, rows are time
vectorized_run_sim <- function(nodes, edges, num_generations, state) {
tic()
# nodes <- food_webs_raw[[1]][[1]]
# edges <- food_webs_raw[[1]][[2]]
# state <- make_state(nodes, 10)
# num_generations <- 100
# generate adjacency matrix from node and edge list
adjacency_matrix <<- make_adj(nodes, edges)
S <- nrow(adjacency_matrix)
# set parameters
r <- ifelse(rowSums(adjacency_matrix) == 0, 1, 0)
K <- rep(1, S)
x <- rep(0.5, S)
y <- matrix(rep(6, S^2), nrow = S, ncol = S)
e <- matrix(rep(1, S^2), nrow = S, ncol = S)
B0 <- matrix(rep(0.5, S^2), nrow = S, ncol = S)
q <- 0.2
pars <- list(r = r, K = K, x = x, y = y, e = e, B0 = B0, q = q)
# set time vector times = (1,...,2000)
times <- seq(1,num_generations,1)
# run simulation on web and store output as dataframe
simulation_df <- as.data.frame(ode(state, times, vectorized_get_dB, pars, method = "ode45"))
simulation_df <- simulation_df[, 2:ncol(simulation_df)]
# get species ID's from adjacency matrix
species_IDs <- colnames(adjacency_matrix)
colnames(simulation_df) <- species_IDs
toc()
return(simulation_df)
}
# function to use a monte carlo simulation to optimize initial conditions for fewest extinctions
monte_carlo_state <- function(num_iterations, nodes, edges) {
# get number of species in food web
num_species <- nrow(nodes)
# use lapply to generate random initial states and test each one on 25 generations of the ATN
possible_states <- lapply(1:num_iterations, function(i) {
# generate a random state
rand_state <- runif(num_species)
# test that state on the ATN
curr_results <- vectorized_run_sim(nodes, edges, 100, rand_state)
# get final biomasses
final_state <- curr_results[nrow(curr_results), ]
# check how many species went extinct
num_extinct <- length(final_state[final_state < 0.0000000001])
# return final state and store its score in the last position of the vector
rand_state <- append(rand_state, num_extinct)
})
# return only the best state
best_state <- NULL
min_extinctions <- Inf
for(i in 1:length(possible_states)) {
curr_state <- possible_states[[i]]
curr_score <- curr_state[length(curr_state)]
if(curr_score < min_extinctions) {
best_state <- curr_state[-length(curr_state)]
min_extinctions <- curr_score
}
}
print("FINISHED MONTE CARLO!")
return(best_state)
}
