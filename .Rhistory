plot(tvec, xvec, 'l')
kvals <- seq(from=0, to=4, by=0.01)
sslist <- list()
counter <- 1
for(k in kvals){
# Specify the time points of the simulation:
tvec <- seq(from=0, to=2000, by=1)
# Initialize an array for the output:
xvec <- rep(NA, length(tvec))
# Set initial condition:
xvec[1] <- 0.01
# Loop over time values and calculate population size:
for(t in tvec[2:length(tvec)]){
xvec[t+1] <- cubic(xvec[t], k)
}
ss <- xvec[451:501]
sslist[[counter]] <- ss
counter <- counter + 1
}
temp <- sslist %>%
map(~ tibble(ss=.)) %>%
bind_rows(.id="index") %>%
mutate(index=as.numeric(index)) %>%
left_join(tibble(k=kvals) %>% mutate(index=1:n()), by="index") %>%
select(k, ss)
temp %>%
ggplot(aes(x=k, y=ss)) +
geom_point(size=0.3) +
theme_classic()
library(tidyverse)
library(tictoc)
library(deSolve)
library(network)
library(igraph)
library(intergraph)
# set wd to active script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load helper functions and ecosystem service functions
source("helper_functions.R")
source("ecosystem_services.R")
# read in some food webs from node and edge lists
food_webs_raw <- read_food_webs("data/food_webs/historical")
# run the simulation on every food web in list
full_sims <- lapply(1:length(food_webs_raw), function(i){
# run simulation on current site
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = 10,
post_dist_gens = 10,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
#pre_dist_state <- curr_sim
})
names(full_sims) <- names(food_webs_raw)
View(full_sims)
View(full_sims[["Canoe_Beach_Cove.High"]])
# run the simulation on every food web in list
full_sims <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 10
post_d_g <- 10
# run simulation on current site
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- unlist(curr_sim[pre_d_g,])
final_state <- unlist(curr_sim[nrow(first_half),])
list(pre_dist_state, final_state)
})
View(full_sims[["Canoe_Beach_Cove.High"]])
# run the simulation on every food web in list
full_sims <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 10
post_d_g <- 10
# run simulation on current site
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- unlist(curr_sim[pre_d_g,])
final_state <- unlist(curr_sim[nrow(curr_sim),])
data.frame(pre_dist_state, final_state)
})
names(full_sims) <- names(food_webs_raw)
View(full_sims[["Canoe_Beach_Cove.High"]])
# run the simulation on every food web in list
full_sims <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 10
post_d_g <- 10
# run simulation on current site
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- curr_sim[pre_d_g,]
final_state <- curr_sim[nrow(curr_sim),]
rbind(pre_dist_state, final_state)
})
names(full_sims) <- names(food_webs_raw)
View(full_sims[["Canoe_Beach_Cove.High"]])
# use lapply to loop over all food webs
filtration_scores <- lapply(1:length(full_sims), function(i) {
# apply again to loop over every row of time series dataframe
filtration_t_series <- lapply(1:nrow(full_sims[[i]]), function(j) {
# get current row from dataframe
curr_row <- as.numeric(full_sims[[i]][j,])
# get names from column headers
names(curr_row) <- colnames(full_sims[[i]])
# calculate score for that row
curr_filtration <- water_filtration(curr_row, food_webs_raw[[i]][[1]])
})
})
# make into time series dataframes
filtration_time_series <- lapply(1:length(filtration_scores), function(i) {
data.frame(t = 1:length(filtration_scores[[i]]), site = names(full_sims)[i], score = unlist(filtration_scores[[i]]))
})
# plot filtration scores for all sites over time
all_filtration_data <- bind_rows(filtration_time_series)
ggplot(data = all_filtration_data, aes(x = t, y = score)) +
geom_line() +
facet_wrap(~site)
pd_state <- full_sims[[1]][1,]
f_state <- full_sims[[1]][2,]
delta_es <- calc_delta_es(pd_state, f_state, water_filtration)
# input: vectors of biomasses before disturbance and at end of simulation,
#   function to calculate ecosystem service
# output: numeric change in service between two time points
# function to calculate change in a service
calc_delta_es <- function(pre_dist_state, final_state, es_fun, ...) {
# get service score before and after disturbance
pd_es <- es_fun(pre_dist_state, ...)
f_es <- es_fun(final_state, ...)
# calculate change in service
delat_es <- (f_es - pd_es)
}
# input: vectors of biomasses before disturbance and at end of simulation,
#   function to calculate ecosystem service
# output: numeric change in service between two time points
# function to calculate change in a service
calc_delta_es <- function(pre_dist_state, final_state, es_fun, ...) {
# get service score before and after disturbance
pd_es <- es_fun(pre_dist_state, ...)
f_es <- es_fun(final_state, ...)
# calculate change in service
delta_es <- (f_es - pd_es)
}
delta_es <- calc_delta_es(pd_state, f_state, water_filtration)
node_list <- food_webs_raw[[1]][[1]]
delta_es <- calc_delta_es(pd_state, f_state, water_filtration, node_list)
# calculate change in ecosystem service for all sites
delta_filtrations <- lapply(full_sims, function(i) {
# get pre and post disturbance states
pd_state <- full_sims[[i]][1,]
f_state <- full_sims[[i]][2,]
# get node list
node_list <- food_webs_raw[[i]][[1]]
# calculate change in ecosystem service
delta_es <- calc_delta_es(pd_state, f_state, water_filtration, node_list)
})
# calculate change in ecosystem service for all sites
delta_filtrations <- lapply(1:length(full_sims), function(i) {
# get pre and post disturbance states
pd_state <- full_sims[[i]][1,]
f_state <- full_sims[[i]][2,]
# get node list
node_list <- food_webs_raw[[i]][[1]]
# calculate change in ecosystem service
delta_es <- calc_delta_es(pd_state, f_state, water_filtration, node_list)
})
View(delta_filtrations)
names(delta_filtrations) <- names(food_webs_raw)
## calculate relative ascendancies ----
# iterate over node and edge lists and generate adjacency matrices
adjacency_matrices <- lapply(1:length(food_webs_raw), function(i) {
# get node and edge lists for current food web
curr_nodes <- food_webs_raw[[i]][[1]]
curr_edges <- food_webs_raw[[i]][[2]]
# generate adjacency matrix
curr_adj_mat <- make_adj(curr_nodes, curr_edges)
})
# get site names for adjacency matrices
names(adjacency_matrices) <- names(food_webs_raw)
# calculate relative ascendancies from adjacency matrices
relative_ascendancies <- lapply(1:length(adjacency_matrices), function(i) {
# get current adjacency matrix
curr_adj_mat <- adjacency_matrices[[i]]
# create network object
curr_network <- network(curr_adj_mat)
#calculate rel ascendancy
enaAscendency(curr_network)
})
View(relative_ascendancies)
# combine es data and rel asc into one dataframe
model_data <- data.frame(rel_ascendancy = unlist(relative_ascendancies), water_filtration = unlist(delta_filtrations))
View(model_data)
# combine es data and rel asc into one dataframe
model_data <- data.frame(site = names(food_webs_raw), rel_ascendancy = unlist(relative_ascendancies), water_filtration = unlist(delta_filtrations))
rownames(model_data) <- ""
rownames(model_data) <- NULL
ggplot(data = model_data, aes(x = rel_ascendancy, y = water_filtration)) +
geom_point() +
geom_smooth()
library(tidyverse)
library(tictoc)
library(deSolve)
library(network)
library(igraph)
library(intergraph)
# set wd to active script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load helper functions and ecosystem service functions
source("helper_functions.R")
source("ecosystem_services.R")
# read in some food webs from node and edge lists
food_webs_raw <- read_food_webs("data/food_webs/historical")
# run simulation on all sites 100 times
all_sims <- lapply(1:100, function(j) {
# run the simulation on every food web in list
pre_post_states <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 1000
post_d_g <- 1000
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- curr_sim[pre_d_g,]
final_state <- curr_sim[nrow(curr_sim),]
rbind(pre_dist_state, final_state)
})
names(full_sims) <- names(food_webs_raw)
})
# run simulation on all sites 100 times
all_sims <- lapply(1:2, function(j) {
# run the simulation on every food web in list
pre_post_states <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 1000
post_d_g <- 1000
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- curr_sim[pre_d_g,]
final_state <- curr_sim[nrow(curr_sim),]
rbind(pre_dist_state, final_state)
})
names(full_sims) <- names(food_webs_raw)
})
# run simulation on all sites 100 times
all_sims <- lapply(1:1, function(j) {
# run the simulation on every food web in list
pre_post_states <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 1000
post_d_g <- 1000
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- curr_sim[pre_d_g,]
final_state <- curr_sim[nrow(curr_sim),]
rbind(pre_dist_state, final_state)
})
names(pre_post_states) <- names(food_webs_raw)
})
# run simulation on all sites 100 times
all_sims <- lapply(1:1, function(j) {
# run the simulation on every food web in list
pre_post_states <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 200
post_d_g <- 200
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- curr_sim[pre_d_g,]
final_state <- curr_sim[nrow(curr_sim),]
rbind(pre_dist_state, final_state)
})
names(pre_post_states) <- names(food_webs_raw)
})
# load helper functions and ecosystem service functions
source("helper_functions.R")
source("ecosystem_services.R")
# read in some food webs from node and edge lists
food_webs_raw <- read_food_webs("data/food_webs/historical")
# run simulation on all sites 100 times
all_sims <- lapply(1:1, function(j) {
# run the simulation on every food web in list
pre_post_states <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 200
post_d_g <- 200
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- curr_sim[pre_d_g,]
final_state <- curr_sim[nrow(curr_sim),]
rbind(pre_dist_state, final_state)
})
names(pre_post_states) <- names(food_webs_raw)
})
# run simulation on all sites 100 times
all_sims <- lapply(1:10, function(j) {
# run the simulation on every food web in list
pre_post_states <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 200
post_d_g <- 200
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- curr_sim[pre_d_g,]
final_state <- curr_sim[nrow(curr_sim),]
rbind(pre_dist_state, final_state)
})
names(pre_post_states) <- names(food_webs_raw)
})
# run simulation on all sites 100 times
all_sims <- lapply(1:3, function(j) {
# run the simulation on every food web in list
pre_post_states <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 100
post_d_g <- 100
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- curr_sim[pre_d_g,]
final_state <- curr_sim[nrow(curr_sim),]
rbind(pre_dist_state, final_state)
})
names(pre_post_states) <- names(food_webs_raw)
})
View(all_sims)
all_sims[[1]]
post_d_g <- 50
# run simulation on all sites 100 times
all_sims <- lapply(1:2, function(j) {
# run the simulation on every food web in list
pre_post_states <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 50
post_d_g <- 50
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- curr_sim[pre_d_g,]
final_state <- curr_sim[nrow(curr_sim),]
rbind(pre_dist_state, final_state)
})
names(pre_post_states) <- names(food_webs_raw)
pre_post_states
})
ggplot(data = model_data, aes(x = rel_ascendancy, y = water_filtration)) +
geom_point() +
geom_smooth() +
labs(x = "Relative Ascendancy", y = paste0(expression(delta), " ES (Water Filtration)"))
# run simulation on all sites 100 times
all_sims <- lapply(1:1, function(j) {
# run the simulation on every food web in list
pre_post_states <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 10
post_d_g <- 10
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- curr_sim[pre_d_g,]
final_state <- curr_sim[nrow(curr_sim),]
rbind(pre_dist_state, final_state)
})
names(pre_post_states) <- names(food_webs_raw)
pre_post_states
})
# run simulation on all sites 100 times
all_sims <- lapply(1:1, function(j) {
# run the simulation on every food web in list
pre_post_states <- lapply(1:length(food_webs_raw), function(i){
# define number of generations to run simulation before and after disturbance
pre_d_g <- 100
post_d_g <- 100
curr_sim <- sim_disturbance(nodes = food_webs_raw[[i]][[1]],
edges = food_webs_raw[[i]][[2]],
pre_dist_gens = pre_d_g,
post_dist_gens = post_d_g,
dist_fun = rand_extinct)
# extract pre disturbance state and final state
pre_dist_state <- curr_sim[pre_d_g,]
final_state <- curr_sim[nrow(curr_sim),]
rbind(pre_dist_state, final_state)
})
names(pre_post_states) <- names(food_webs_raw)
pre_post_states
})
test <- lapply(1:length(all_sims), function(j) {
# calculate change in ecosystem service for all sites
delta_filtrations <- lapply(1:length(all_sims[[j]]), function(i) {
# get pre and post disturbance states
pd_state <- full_sims[[i]][1,]
f_state <- full_sims[[i]][2,]
# get node list
node_list <- food_webs_raw[[i]][[1]]
# calculate change in ecosystem service
delta_es <- calc_delta_es(pd_state, f_state, water_filtration, node_list)
})
names(delta_filtrations) <- names(food_webs_raw)
delta_filtrations
})
test <- lapply(1:length(all_sims), function(j) {
# calculate change in ecosystem service for all sites
delta_filtrations <- lapply(1:length(all_sims[[j]]), function(i) {
# get pre and post disturbance states
pd_state <- all_sims[[j]][[i]][1,]
f_state <- all_sims[[j]][[i]][2,]
# get node list
node_list <- food_webs_raw[[i]][[1]]
# calculate change in ecosystem service
delta_es <- calc_delta_es(pd_state, f_state, water_filtration, node_list)
})
names(delta_filtrations) <- names(food_webs_raw)
delta_filtrations
})
View(test)
# combine es data and rel asc into one dataframe
model_data <- data.frame(site = names(food_webs_raw), rel_ascendancy = unlist(relative_ascendancies), water_filtration = unlist(delta_filtrations[[1]]))
## calculate relative ascendancies ----
# iterate over node and edge lists and generate adjacency matrices
adjacency_matrices <- lapply(1:length(food_webs_raw), function(i) {
# get node and edge lists for current food web
curr_nodes <- food_webs_raw[[i]][[1]]
curr_edges <- food_webs_raw[[i]][[2]]
# generate adjacency matrix
curr_adj_mat <- make_adj(curr_nodes, curr_edges)
})
# get site names for adjacency matrices
names(adjacency_matrices) <- names(food_webs_raw)
# combine es data and rel asc into one dataframe
model_data <- data.frame(site = names(food_webs_raw), rel_ascendancy = unlist(relative_ascendancies), water_filtration = unlist(delta_filtrations[[1]]))
## calculate relative ascendancies ----
# iterate over node and edge lists and generate adjacency matrices
adjacency_matrices <- lapply(1:length(food_webs_raw), function(i) {
# get node and edge lists for current food web
curr_nodes <- food_webs_raw[[i]][[1]]
curr_edges <- food_webs_raw[[i]][[2]]
# generate adjacency matrix
curr_adj_mat <- make_adj(curr_nodes, curr_edges)
})
## calculate relative ascendancies ----
# iterate over node and edge lists and generate adjacency matrices
adjacency_matrices <- lapply(1:length(food_webs_raw), function(i) {
# get node and edge lists for current food web
curr_nodes <- food_webs_raw[[i]][[1]]
curr_edges <- food_webs_raw[[i]][[2]]
# generate adjacency matrix
curr_adj_mat <- make_adj(curr_nodes, curr_edges)
})
# get site names for adjacency matrices
names(adjacency_matrices) <- names(food_webs_raw)
# calculate relative ascendancies from adjacency matrices
relative_ascendancies <- lapply(1:length(adjacency_matrices), function(i) {
# get current adjacency matrix
curr_adj_mat <- adjacency_matrices[[i]]
# create network object
curr_network <- network(curr_adj_mat)
#calculate rel ascendancy
enaAscendency(curr_network)
})
# combine es data and rel asc into one dataframe
model_data <- data.frame(site = names(food_webs_raw), rel_ascendancy = unlist(relative_ascendancies), water_filtration = unlist(delta_filtrations[[1]]))
# combine es data and rel asc into one dataframe
model_data <- data.frame(site = names(food_webs_raw), rel_ascendancy = unlist(relative_ascendancies), water_filtration = unlist(test[[1]]))
rownames(model_data) <- NULL
View(model_data)
ggplot(data = model_data, aes(x = rel_ascendancy, y = water_filtration)) +
geom_point() +
geom_smooth() +
labs(x = "Relative Ascendancy", y = paste0(expression(delta), " ES (Water Filtration)"))
